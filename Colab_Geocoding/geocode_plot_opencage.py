# -*- coding: utf-8 -*-
"""Geocode-Plot_OpenCage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TtMkbA2LFkC0Nuvsq0dZzQqGJIx1xQ7u

This is a script for geocoding and plotting spatial information from an EXCEL spreadsheet with an "Addresses" column. The API used here is the OpenCage API, which is just one of many geocoding APIs available. OpenCage is proprietary and only allows 2500 spatial queries per day for non-paying users. Therefore, this script cannot be used for large-scale projects and is merely a trial.

The first step is to get COLAB working:
"""

## mount drive
from google.colab import drive
drive.mount("/content/drive")

"""A file path needs to be defined for storing input or output files linked with this script:"""

directory="/content/drive/My Drive/Colab_Geohumanities/"

"""Now we can install packages that are not part of Python's standard distribution but are necessary for geocoding and plotting maps. There will most likely be a dependency error, but the script should still work."""

## install packages that are not part of Python's standard distribution

!pip install opencage
!pip install basemap

"""Now that all packages are installed, we can read the input data (in this case from Github) and write the geocoded output to a new file."""

# Commented out IPython magic to ensure Python compatibility.
## import relevant packages
import pandas as pd
from opencage.geocoder import OpenCageGeocode
# command needed for correct plotting in Jupyter Notebooks:
# %matplotlib inline 
import pandas as pd
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import os

## geocode data from spreadsheet

# define API and API key
key = "419f33cee39647e38b83b3b3f2d74670" # Monika's AP key: please do not share outside project
geocoder = OpenCageGeocode(key) # OpenCage is one of many geocoding services

# input addresses in EXCEL format and read
infile="https://github.com/MonikaBarget/GeoHumTutorials/blob/master/Colab_Geocoding/Addresses.xlsx?raw=true"
# infile=directory+"Adresses.xlsx" # alternative input from Google Drive
addresses_df = pd.read_excel(infile)
addresses = addresses_df["Addresses"].values.tolist()

latitudes = []
longitudes = []

# geocode each address in file

for address in addresses:
	result = geocoder.geocode(address, no_annotations="1")

	if result and len(result):
		longitude = result[0]['geometry']['lng']
		latitude = result[0]['geometry']['lat']
	else:
		longitude = "N/A"
		latitude = "N/A"

	latitudes.append(latitude)
	longitudes.append(longitude)

addresses_df["latitudes"] = latitudes
addresses_df["longitudes"] = longitudes

# write geocoded places to new file

addresses_df.to_excel(directory+"Addresses_Geocoded.xlsx")
print("All addresses geocoded!")

"""If all addresses have been successfully geocoded, the next step is to plot the geocoded data to a 2-dimensional, static map. As this map is a world-map, the individual places will only be visible as small red dots."""

## plot geocoded data

# read file with geocoded data
places = directory+'Addresses_Geocoded.xlsx'
data = pd.read_excel(places)

# set the size of the map
fig = plt.figure(figsize=(12,9))


# create the map - set latitude and longitude
m = Basemap(projection = 'mill', llcrnrlat = -90, urcrnrlat = 90, llcrnrlon = -180, urcrnrlon = 180, resolution = 'c')

# draw the coastline
m.drawcoastlines()
m.drawcountries(color='gray') # OPTIONAL: define color for modern country borders
m.drawstates(color='gray') # OPTIONAL: define color for modern US federal states

# write variables for latitude and longitude to list
lat = data['latitudes'].tolist()
lon = data['longitudes'].tolist()

# plot the map
m.scatter(lon, lat, latlon = True, s = 10, c = 'red', marker = 'o', alpha = 1)

plt.show()

"""Congratulations, you have just plotted your first map! You can save the image by rightclicking with your mouse and downloading it to your local drive.

"""